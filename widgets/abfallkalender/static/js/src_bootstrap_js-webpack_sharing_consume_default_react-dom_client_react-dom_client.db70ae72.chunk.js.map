{"version":3,"file":"static/js/src_bootstrap_js-webpack_sharing_consume_default_react-dom_client_react-dom_client.db70ae72.chunk.js","mappings":"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","sources":["translations.js","Abfallkalender.jsx","App.jsx","bootstrap.js"],"sourcesContent":["const translations = {\n    en: require('./i18n/en.json'),\n    de: require('./i18n/de.json'),\n    ru: require('./i18n/ru.json'),\n    pt: require('./i18n/pt.json'),\n    nl: require('./i18n/nl.json'),\n    fr: require('./i18n/fr.json'),\n    it: require('./i18n/it.json'),\n    es: require('./i18n/es.json'),\n    pl: require('./i18n/pl.json'),\n    'zh-cn': require('./i18n/zh-cn.json'),\n};\n\nexport default translations;\n","import React from 'react';\nimport CardContent from '@mui/material/CardContent';\nimport Card from '@mui/material/Card';\nimport { withStyles, withTheme } from '@mui/styles';\nimport { I18n } from '@iobroker/adapter-react-v5';\nimport { VisRxWidget } from '@iobroker/vis-2-widgets-react-dev';\nimport { ReactComponent as TrashIcon } from './img/AbfalltonneMitText.svg';\n\nconst styles = () => ({\n    root: {\n        flex: 1,\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        width: '100%',\n        overflow: 'hidden',\n    },\n});\n\nclass Abfallkalender extends (window.visRxWidget || VisRxWidget) {\n    constructor(props) {\n        super(props);\n        this.refTrashIcon = React.createRef();\n    }\n\n    static getWidgetInfo() {\n        return {\n            id: 'tplAbfallkalender',\n            visSet: 'abfallkalender',\n            visSetLabel: 'vis_2_widgets_abfallkalender', // Widget set translated label (should be defined only in one widget of set)\n            visSetColor: '#63C149',                // Color of widget set. it is enough to set color only in one widget of set\n            visName: I18n.t('vis_2_widgets_abfallkalender'), // Name of widget\n            visAttrs: [\n                {\n                    name: 'common', // group name\n                    label: 'vis_2_widgets_abfallkalender_common', // translated group label\n                    fields: [\n                        {\n                            name: 'oid',     // name in data structure\n                            type: 'id',\n                            label: 'vis_2_widgets_abfallkalender_oid', // translated field label\n                        },\n                        {\n                            name: 'trashcolor',\n                            label: 'vis_2_widgets_abfallkalender_trashcolor',\n                            type: 'color',\n                        },\n                        {\n                            name: 'trashcolorfactor',\n                            label: 'vis_2_widgets_abfallkalender_trashcolor_factor',\n                            type: 'slider',\n                            min: -1,\n                            max: 1,\n                            step: 0.1,\n                        },\n                        {\n                            name: 'dateformat',    // name in data structure\n                            label: 'vis_2_widgets_abfallkalender_dateformat', // translated field label\n                            type: 'select',\n                            options: [\n                                {\n                                    value: 'short',\n                                    label: 'vis_2_widgets_abfallkalender_dateformat_short',\n                                },\n                                {\n                                    value: 'long',\n                                    label: 'vis_2_widgets_abfallkalender_dateformat_long',\n                                },\n                            ],\n                            default: 'short',\n                        },\n                        {\n                            name: 'whatsapplogo',\n                            label: 'vis_2_widgets_abfallkalender_whatsapplogo',\n                            type: 'checkbox',\n                        },\n                        {\n                            name: 'blink',\n                            label: 'vis_2_widgets_abfallkalender_blink',\n                            type: 'checkbox',\n                        },\n                    ],\n                    onchange:  async (field, data, changeData, socket) => {\n                        const object = await socket.getObject(data.oid);\n                        console.log('onchange in oid field');\n                        if (object && object.common) {\n                            data.whatsapplogo = object.common.whatsapplogo !== undefined ? object.common.whatsapplogo : true;\n                            data.blink = object.common.blink !== undefined ? object.common.blink : true;\n                            data.dateformat = object.common.dateformat !== undefined ? object.common.dateformat : 'short';\n                            data.trashcolor = object.common.trashcolor !== undefined ? object.common.trashcolor : '';\n                            data.trashcolorfactor = object.common.trashcolorfactor !== undefined ? object.common.trashcolorfactor : -0.3;\n                            changeData(data);\n                        }\n                    },\n                },\n                // check here all possible types https://github.com/ioBroker/ioBroker.vis/blob/react/src/src/Attributes/Widget/SCHEMA.md\n            ],\n            visPrev: 'widgets/abfallkalender/img/abfallkalender.png',\n        };\n    }\n\n    // eslint-disable-next-line class-methods-use-this\n    async propertiesUpdate() {\n        // Widget has 3 important states\n        // 1. this.state.values - contains all state values, that are used in widget (automatically collected from widget info).\n        //                        So you can use `this.state.values[this.state.rxData.oid + '.val']` to get value of state with id this.state.rxData.oid\n        // 2. this.state.rxData - contains all widget data with replaced bindings. E.g. if this.state.data.type is `{system.adapter.admin.0.alive}`,\n        //                        then this.state.rxData.type will have state value of `system.adapter.admin.0.alive`\n        // 3. this.state.rxStyle - contains all widget styles with replaced bindings. E.g. if this.state.styles.width is `{javascript.0.width}px`,\n        //                        then this.state.rxData.type will have state value of `javascript.0.width` + 'px\n        if (this.state.rxData.oid &&\n            this.state.rxData.oid !== 'nothing_selected' &&\n            (!this.state.object || this.state.rxData.oid !== this.state.object._id)\n        ) {\n            const object = await this.props.socket.getObject(this.state.rxData.oid);\n            this.setState({ object });\n        }\n        this.renderTrash();\n    }\n\n    componentDidMount() {\n        super.componentDidMount();\n\n        // Update data\n        this.propertiesUpdate();\n    }\n\n    // Do not delete this method. It is used by vis to read the widget configuration.\n    // eslint-disable-next-line class-methods-use-this\n    getWidgetInfo() {\n        return Abfallkalender.getWidgetInfo();\n    }\n\n    // This function is called every time when rxData is changed\n    onRxDataChanged() {\n        this.propertiesUpdate();\n    }\n\n    // This function is called every time when rxStyle is changed\n    // eslint-disable-next-line class-methods-use-this\n    onRxStyleChanged() {\n\n    }\n\n    // This function is called every time when some Object State updated, but all changes lands into this.state.values too\n    // eslint-disable-next-line class-methods-use-this, no-unused-vars\n    onStateUpdated(id, state) {\n    }\n\n    renderTrash() {\n        const {\n            blink, whatsapplogo, dateformat, trashcolor, trashcolorfactor,\n        } = this.state.data;\n        this.refTrashIcon.current.childNodes.forEach(element => {\n            if (element.id === 'tonne') {\n                // color of the dustbin\n                if (trashcolor === '') {\n                    this.state.data.trashcolor = element.attributes.fill.nodeValue;\n                } else {\n                    element.attributes.fill.nodeValue = this.state.data.trashcolor;\n                }\n                console.log(`Farbe der Tonne ist: ${element.attributes.fill.nodeValue}`);\n            }\n            if (element.id === 'tonne-innen') {\n                // inner color of the dustbin\n                const colors = trashcolor.replace('rgba(', '').replace(')', '').split(',');\n                const color0 = parseInt(colors[0]);\n                const color1 = parseInt(colors[1]);\n                const color2 = parseInt(colors[2]);\n                const factor = 1 + trashcolorfactor;\n                const newColor = `rgba(${color0 * factor},${color1 * factor},${color2 * factor},1)`;\n                element.attributes.fill.nodeValue = newColor;\n                console.log(`Farbe der Tonne innen ist: ${element.attributes.fill.nodeValue}`);\n            }\n            if (element.id === 'whatsapp') {\n                // show or hide the Whatsapp logo\n                element.attributes.style.value = `visibility: ${whatsapplogo === true ? 'visible' : 'hidden'};`;\n            }\n            if (element.id.substr(0, 'Abfuhrdatum'.length - 1) === 'Abfuhrdatum') {\n                console.log(`Abfuhrdatum: ${element.innerHTML}`);\n            }\n            if (element.id.substr(0, 'AnzahlTage'.length - 1) === 'AnzahlTage') {\n                console.log(`in Tagen: ${element.innerHTML}`);\n            }\n        });\n        return true;\n    }\n\n    renderWidgetBody(props) {\n        // eslint-disable-next-line prefer-template\n        super.renderWidgetBody(props);\n        return <Card class={`\"card-trash${props.id}\"`} style={{ width: '100%', height: '100%'}}>\n            <CardContent style={{ width: '100%', height: '100%', display: 'flex', justifyContent:'center', alignItems: 'center'}}>\n                <TrashIcon class={`\"trashicon${props.id}\"`} ref={this.refTrashIcon} />\n            </CardContent>\n        </Card>;\n    }\n}\n\nexport default withStyles(styles)(withTheme(Abfallkalender));\n","import React from 'react';\n\nimport WidgetDemoApp from '@iobroker/vis-2-widgets-react-dev/widgetDemoApp';\nimport { i18n as I18n } from '@iobroker/adapter-react-v5';\nimport { withStyles } from '@mui/styles';\nimport translations from './translations';\n\nimport Abfallkalender from './Abfallkalender';\n\nconst styles = theme => ({\n    app: {\n        backgroundColor: theme?.palette?.background.default,\n        color: theme?.palette?.text.primary,\n        height: '100%',\n        width: '100%',\n        overflow: 'auto',\n        display: 'flex',\n    },\n});\n\nclass App extends WidgetDemoApp {\n    constructor(props) {\n        super(props);\n\n        // init translations\n        I18n.extendTranslations(translations);\n        this.socket.registerConnectionHandler(this.onConnectionChanged);\n    }\n\n    onConnectionChanged = isConnected => {\n        if (isConnected) {\n            this.socket.getSystemConfig()\n                .then(systemConfig => this.setState({ systemConfig }));\n        }\n    };\n\n    renderWidget() {\n        return <div className={this.props.classes.app}>\n            <Abfallkalender\n                socket={this.socket}\n                themeType={this.state.themeType}\n                style={{\n                    width: 400,\n                    height: 587,\n                }}\n                systemConfig={this.state.systemConfig}\n                data={{\n                    name: 'Abfallkalender',\n                    oid: 'abfallkalender.0.CalendarDoubleQuotes',\n                    blink: true,\n                    whatsapplogo: true,\n                    dateformat: 'short',\n                    trashcolor: '',\n                    trashcolorfactor: -0.3,\n                }}\n            />\n        </div>;\n    }\n}\n\nexport default withStyles(styles)(App);\n","import bootstrap from '@iobroker/vis-2-widgets-react-dev/bootstrap';\nimport App from './App';\n\nbootstrap(App);\n"],"names":["styles","Abfallkalender","props","field","data","changeData","socket","object","id","state","blink","whatsapplogo","dateformat","trashcolor","trashcolorfactor","element","colors","color0","color1","color2","factor","newColor","Card","CardContent","theme","App","isConnected","systemConfig","bootstrap"],"sourceRoot":""}