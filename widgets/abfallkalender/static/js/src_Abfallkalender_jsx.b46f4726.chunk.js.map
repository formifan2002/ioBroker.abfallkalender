{"version":3,"file":"static/js/src_Abfallkalender_jsx.b46f4726.chunk.js","mappings":"4eAQA,MAAMA,EAAS,KAAO,CAClB,KAAM,CACF,KAAM,EACN,QAAS,OACT,eAAgB,SAChB,WAAY,SACZ,MAAO,OACP,SAAU,QACd,CACJ,GAEA,MAAMC,UAAwB,OAAO,aAAe,cAAa,CAC7D,OAAO,eAAgB,CACnB,MAAO,CACH,GAAI,oBACJ,OAAQ,+BACR,YAAa,+BACb,YAAa,UACb,QAAS,iBACT,SAAU,CACN,CACI,KAAM,SACN,MAAO,sCACP,OAAQ,CACJ,CACI,KAAM,MACN,KAAM,KACN,MAAO,kCACX,CACJ,EACA,SAAW,CAAOC,EAAOC,EAAMC,EAAYC,IAAW,wBAClD,MAAMC,EAAS,MAAMD,EAAO,UAAUF,EAAK,GAAG,EAC9C,QAAQ,IAAI,uBAAuB,EAC/BG,GAAUA,EAAO,QAKjBF,EAAWD,CAAI,CAEvB,CAAC,CACL,EACA,CACI,KAAM,SACN,OAAQ,CACJ,CACI,KAAM,aACN,MAAO,0CACP,KAAM,SACN,QAAS,CACL,CACI,MAAO,QACP,MAAO,+CACX,EACA,CACI,MAAO,OACP,MAAO,+CACX,CACJ,EACA,QAAS,OACb,CACJ,CACJ,EACA,CACI,KAAM,SACN,OAAQ,CACJ,CACI,KAAM,eACN,MAAO,4CACP,KAAM,UACV,CACJ,CACJ,EACA,CACI,KAAM,SACN,OAAQ,CACJ,CACI,KAAM,QACN,MAAO,qCACP,KAAM,UACV,CACJ,CACJ,CAEJ,EACA,QAAS,6DACb,CACJ,CAGA,kBAAmB,CAQnB,CAEA,mBAAoB,CAChB,MAAM,kBAAkB,EAGxB,KAAK,iBAAiB,CAC1B,CAIA,eAAgB,CACZ,OAAOF,EAAe,cAAc,CACxC,CAGA,iBAAkB,CACd,QAAQ,IAAI,iBAAiB,EAC7B,KAAK,iBAAiB,CAC1B,CAIA,kBAAmB,CAEnB,CAIA,eAAeM,EAAIC,EAAO,CACtB,QAAQ,IAAI,gBAAgB,CAChC,CAEA,iBAAiBC,EAAO,CACpB,aAAM,iBAAiBA,CAAK,EAErB,kBAAC,OAAI,CAAC,MAAO,CAAE,MAAO,OAAQ,OAAQ,MAAO,GAChD,kBAAC,cAAW,KACP,SAAO,8BAA8B,EACrC,KAAK,MAAM,OAAO,GAAG,KAAK,MAAM,OAAO,SAAS,EAChD,KAAK,MAAM,OAAO,GAAG,KAAK,MAAM,OAAO,gBAAgB,EACvD,KAAK,MAAM,OAAO,GAAG,KAAK,MAAM,OAAO,kBAAkB,EACzD,KAAK,MAAM,OAAO,GAAG,KAAK,MAAM,OAAO,WAAW,CACvD,CACJ,CACJ,CACJ,CAEA,aAAe,cAAWT,CAAM,KAAE,aAAUC,CAAc,CAAC,C","sources":["Abfallkalender.jsx"],"sourcesContent":["import React from 'react';\nimport {\n    Card, CardContent,\n} from '@mui/material';\nimport { withStyles, withTheme } from '@mui/styles';\nimport { I18n } from '@iobroker/adapter-react-v5';\nimport { VisRxWidget } from '@iobroker/vis-2-widgets-react-dev';\n\nconst styles = () => ({\n    root: {\n        flex: 1,\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        width: '100%',\n        overflow: 'hidden',\n    },\n});\n\nclass Abfallkalender extends (window.visRxWidget || VisRxWidget) {\n    static getWidgetInfo() {\n        return {\n            id: 'tplAbfallkalender',\n            visSet: 'vis-2-widgets-abfallkalender',\n            visSetLabel: 'vis_2_widgets_abfallkalender', // Widget set translated label (should be defined only in one widget of set)\n            visSetColor: '#cf00ff',                // Color of widget set. it is enough to set color only in one widget of set\n            visName: 'Abfallkalender',                 // Name of widget\n            visAttrs: [\n                {\n                    name: 'common', // group name\n                    label: 'vis_2_widgets_abfallkalender_common', // translated group label\n                    fields: [\n                        {\n                            name: 'oid',     // name in data structure\n                            type: 'id',\n                            label: 'vis_2_widgets_abfallkalender_oid', // translated field label\n                        },\n                    ],\n                    onchange:  async (field, data, changeData, socket) => {\n                        const object = await socket.getObject(data.oid);\n                        console.log('onchange in oid field');\n                        if (object && object.common) {\n                            /* data.min = object.common.min !== undefined ? object.common.min : 0;\n                            data.max = object.common.max !== undefined ? object.common.max : 100;\n                            data.unit = object.common.unit !== undefined ? object.common.unit : '';\n                            */\n                            changeData(data);\n                        }\n                    },\n                },\n                {\n                    name: 'common', // group name\n                    fields: [\n                        {\n                            name: 'dateformat',    // name in data structure\n                            label: 'vis_2_widgets_abfallkalender_dateformat', // translated field label\n                            type: 'select',\n                            options: [\n                                {\n                                    value: 'short',\n                                    label: 'vis_2_widgets_abfallkalender_dateformat_short',\n                                },\n                                {\n                                    value: 'long',\n                                    label: 'vis_2_widgets_abfallkalender_dateformat_short',\n                                },\n                            ],\n                            default: 'short',\n                        },\n                    ],\n                },\n                {\n                    name: 'common', // group name\n                    fields: [\n                        {\n                            name: 'whatsapplogo',\n                            label: 'vis_2_widgets_abfallkalender_whatsapplogo',\n                            type: 'checkbox',\n                        },\n                    ],\n                },\n                {\n                    name: 'common', // group name\n                    fields: [\n                        {\n                            name: 'blink',\n                            label: 'vis_2_widgets_abfallkalender_blink',\n                            type: 'checkbox',\n                        },\n                    ],\n                },\n                // check here all possible types https://github.com/ioBroker/ioBroker.vis/blob/react/src/src/Attributes/Widget/SCHEMA.md\n            ],\n            visPrev: 'widgets/vis-2-widgets-abfallkalender/img/abfallkalender.png',\n        };\n    }\n\n    // eslint-disable-next-line class-methods-use-this\n    propertiesUpdate() {\n        // Widget has 3 important states\n        // 1. this.state.values - contains all state values, that are used in widget (automatically collected from widget info).\n        //                        So you can use `this.state.values[this.state.rxData.oid + '.val']` to get value of state with id this.state.rxData.oid\n        // 2. this.state.rxData - contains all widget data with replaced bindings. E.g. if this.state.data.type is `{system.adapter.admin.0.alive}`,\n        //                        then this.state.rxData.type will have state value of `system.adapter.admin.0.alive`\n        // 3. this.state.rxStyle - contains all widget styles with replaced bindings. E.g. if this.state.styles.width is `{javascript.0.width}px`,\n        //                        then this.state.rxData.type will have state value of `javascript.0.width` + 'px\n    }\n\n    componentDidMount() {\n        super.componentDidMount();\n\n        // Update data\n        this.propertiesUpdate();\n    }\n\n    // Do not delete this method. It is used by vis to read the widget configuration.\n    // eslint-disable-next-line class-methods-use-this\n    getWidgetInfo() {\n        return Abfallkalender.getWidgetInfo();\n    }\n\n    // This function is called every time when rxData is changed\n    onRxDataChanged() {\n        console.log('onRxDataChanged');\n        this.propertiesUpdate();\n    }\n\n    // This function is called every time when rxStyle is changed\n    // eslint-disable-next-line class-methods-use-this\n    onRxStyleChanged() {\n\n    }\n\n    // This function is called every time when some Object State updated, but all changes lands into this.state.values too\n    // eslint-disable-next-line class-methods-use-this, no-unused-vars\n    onStateUpdated(id, state) {\n        console.log('onStateUpdated');\n    }\n\n    renderWidgetBody(props) {\n        super.renderWidgetBody(props);\n\n        return <Card style={{ width: '100%', height: '100%' }}>\n            <CardContent>\n                {I18n.t('vis_2_widgets_abfallkalender')}\n                {this.state.values[`${this.state.rxData.oid}.val`]}\n                {this.state.values[`${this.state.rxData.dateformat}.val`]}\n                {this.state.values[`${this.state.rxData.whatsapplogo}.val`]}\n                {this.state.values[`${this.state.rxData.blink}.val`]}\n            </CardContent>\n        </Card>;\n    }\n}\n\nexport default withStyles(styles)(withTheme(Abfallkalender));\n"],"names":["styles","Abfallkalender","field","data","changeData","socket","object","id","state","props"],"sourceRoot":""}