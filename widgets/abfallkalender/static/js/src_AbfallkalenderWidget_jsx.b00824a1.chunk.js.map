{"version":3,"file":"static/js/src_AbfallkalenderWidget_jsx.b00824a1.chunk.js","mappings":"qRAQA,MAAMA,UAA8B,OAAO,aAAe,cAAa,CACnE,OAAO,eAAgB,CACnB,MAAO,CACH,GAAI,0BACJ,OAAQ,OACR,YAAa,yBACb,YAAa,UACb,QAAS,uBACT,SAAU,CACN,CACI,KAAM,SACN,OAAQ,CACJ,CACI,KAAM,OACN,MAAO,8BACP,KAAM,SACN,QAAS,CAAC,MAAO,UAAW,MAAM,EAClC,QAAS,KACb,CACJ,CACJ,EACA,CACI,KAAM,UACN,MAAO,iCACP,OAAQ,CACJ,CACI,KAAM,MACN,KAAM,KACN,MAAO,4BACX,CACJ,CACJ,CAEJ,EACA,QAAS,8DACb,CACJ,CAGA,kBAAmB,CAQnB,CAEA,mBAAoB,CAChB,MAAM,kBAAkB,EAGxB,KAAK,iBAAiB,CAC1B,CAIA,eAAgB,CACZ,OAAOA,EAAqB,cAAc,CAC9C,CAGA,iBAAkB,CACd,KAAK,iBAAiB,CAC1B,CAIA,kBAAmB,CAEnB,CAIA,eAAeC,EAAIC,EAAO,CAE1B,CAEA,iBAAiBC,EAAO,CACpB,aAAM,iBAAiBA,CAAK,EAErB,kBAAC,OAAI,CAAC,MAAO,CAAE,MAAO,OAAQ,OAAQ,MAAO,GAChD,kBAAC,cAAW,KACP,SAAO,oBAAoB,EAC3B,KAAK,MAAM,OAAO,GAAG,KAAK,MAAM,OAAO,SAAS,CACrD,CACJ,CACJ,CACJ,CAEA,UAAeH,C","sources":["AbfallkalenderWidget.jsx"],"sourcesContent":["import React from 'react';\nimport {\n    Card, CardContent,\n} from '@mui/material';\n\nimport { I18n } from '@iobroker/adapter-react-v5';\nimport { VisRxWidget } from '@iobroker/vis-2-widgets-react-dev';\n\nclass AbfallkalenderWidget extends (window.visRxWidget || VisRxWidget) {\n    static getWidgetInfo() {\n        return {\n            id: 'tplAbfallkalenderWidget',\n            visSet: 'demo',\n            visSetLabel: 'vis_2_widgets_template', // Widget set translated label (should be defined only in one widget of set)\n            visSetColor: '#cf00ff',                // Color of widget set. it is enough to set color only in one widget of set\n            visName: 'AbfallkalenderWidget',                 // Name of widget\n            visAttrs: [\n                {\n                    name: 'common', // group name\n                    fields: [\n                        {\n                            name: 'type',    // name in data structure\n                            label: 'vis_2_widgets_template_type', // translated field label\n                            type: 'select',\n                            options: ['all', 'current', 'days'],\n                            default: 'all',\n                        },\n                    ],\n                },\n                {\n                    name: 'private', // group name\n                    label: 'vis_2_widgets_template_private', // translated group label\n                    fields: [\n                        {\n                            name: 'oid',     // name in data structure\n                            type: 'id',\n                            label: 'vis_2_widgets_template_oid', // translated field label\n                        },\n                    ],\n                },\n                // check here all possible types https://github.com/ioBroker/ioBroker.vis/blob/react/src/src/Attributes/Widget/SCHEMA.md\n            ],\n            visPrev: 'widgets/vis-2-widgets-react-template/img/vis-widget-demo.png',\n        };\n    }\n\n    // eslint-disable-next-line class-methods-use-this\n    propertiesUpdate() {\n        // Widget has 3 important states\n        // 1. this.state.values - contains all state values, that are used in widget (automatically collected from widget info).\n        //                        So you can use `this.state.values[this.state.rxData.oid + '.val']` to get value of state with id this.state.rxData.oid\n        // 2. this.state.rxData - contains all widget data with replaced bindings. E.g. if this.state.data.type is `{system.adapter.admin.0.alive}`,\n        //                        then this.state.rxData.type will have state value of `system.adapter.admin.0.alive`\n        // 3. this.state.rxStyle - contains all widget styles with replaced bindings. E.g. if this.state.styles.width is `{javascript.0.width}px`,\n        //                        then this.state.rxData.type will have state value of `javascript.0.width` + 'px\n    }\n\n    componentDidMount() {\n        super.componentDidMount();\n\n        // Update data\n        this.propertiesUpdate();\n    }\n\n    // Do not delete this method. It is used by vis to read the widget configuration.\n    // eslint-disable-next-line class-methods-use-this\n    getWidgetInfo() {\n        return AbfallkalenderWidget.getWidgetInfo();\n    }\n\n    // This function is called every time when rxData is changed\n    onRxDataChanged() {\n        this.propertiesUpdate();\n    }\n\n    // This function is called every time when rxStyle is changed\n    // eslint-disable-next-line class-methods-use-this\n    onRxStyleChanged() {\n\n    }\n\n    // This function is called every time when some Object State updated, but all changes lands into this.state.values too\n    // eslint-disable-next-line class-methods-use-this, no-unused-vars\n    onStateUpdated(id, state) {\n\n    }\n\n    renderWidgetBody(props) {\n        super.renderWidgetBody(props);\n\n        return <Card style={{ width: '100%', height: '100%' }}>\n            <CardContent>\n                {I18n.t('My Demo ioBroker: ')}\n                {this.state.values[`${this.state.rxData.oid}.val`]}\n            </CardContent>\n        </Card>;\n    }\n}\n\nexport default AbfallkalenderWidget;\n"],"names":["AbfallkalenderWidget","id","state","props"],"sourceRoot":""}